'use strict';

const PLUGIN_NAME = 'hiw';
const END_LINE = require('os').EOL;

const weblog = require('webpack-log');
const path = require('path');
const log = weblog({
    name: PLUGIN_NAME
});

const headerInjectionWebpackPluginDefaultOptions = {
    package: './package.json',
    extensions: ['.js', '.html', '.css'],
    headers: {
        js: (comment) => `/*! ${comment} */`,
        html: (comment) => `<!-- ${comment} -->`,
        css: (comment) => `/** ${comment} **/`,
    }
};

class HeaderInjectionWebpackPlugin {
    constructor(options) {
        this.options = Object.assign({}, headerInjectionWebpackPluginDefaultOptions, options);

        this.getDefaultHeader = this.getDefaultHeader.bind(this);
        this.handleCompilation = this.handleCompilation.bind(this);
        this.attachHeaderToAsset = this.attachHeaderToAsset.bind(this);
        this.apply = this.apply.bind(this);

        if (!this.options.header) {
            this.options.header = this.getDefaultHeader;
        }
    }

    getDefaultHeader() {
        const app = require(path.resolve(process.cwd(), this.options.package));
        return `[${PLUGIN_NAME}] ${app.name} / ${app.version} / ${new Date().toISOString()}`;
    }

    attachHeaderToAsset(filename, compilation) {
        var opts = this.options;
        var ext = '.' + filename.split('.').pop();
        if (!opts.extensions.includes(ext)) {
            return false;
        }
        var header = opts.headers[ext.substr(1)](typeof opts.header === 'function' ? opts.header() : opts.header);
        var asset = compilation.assets[filename];
        var originSource = asset.source();
        var finalSource = `${header}${END_LINE}${originSource}`;
        asset.source = () => finalSource;
        log.info(`Injecting header for ${filename}: ${header}`);
        return true;
    }

    handleCompilation(compilation, callback) {
        log.info(`Injecting header for ${this.options.extensions} files ...`);

        var self = this;

        // compilation.chunks.forEach(function (chunk) {
        //   // Explore each asset filename generated by the chunk:
        //   chunk.files.forEach(function (filename) {
        //     // Get the asset source for each file generated by the chunk:
        //   });
        // });

        // below include chunk files
        let count = 0;
        for (var filename in compilation.assets) {
            self.attachHeaderToAsset(filename, compilation) && count++;
        }
        if (typeof callback === 'function') {
            callback();
        }
        log.info(`${count} file(s) done`);
    }

    apply(compiler) {
        compiler.hooks.emit.tapAsync(PLUGIN_NAME, this.handleCompilation);
        // compiler.plugin('emit', this.handleCompilation);
    }
}

module.exports = HeaderInjectionWebpackPlugin;